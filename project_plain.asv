% ======================================================================= %
% SSY125 Project
% ======================================================================= %
clc
clear

% ======================================================================= %
% Simulation Options
% ======================================================================= %
N = 1e5;  % simulate N bits each transmission (one block)
maxNumErrs = 100; % get at least 100 bit errors (more is better)
maxNum = 1e6; % OR stop if maxNum bits have been simulated
EbN0 = -1:8; % power efficiency range
mod = 1;

% ======================================================================= %
% Other Options
% ======================================================================= %
% ...
N_test = 1e2;
SNR_test = 10;

% ======================================================================= %
% Simulation Chain
% ======================================================================= %
BER = zeros(1, length(EbN0));   % pre-allocate a vector for BER results

for i = 1:length(EbN0)          % use parfor ('help parfor') to parallelize  
  totErr = 0;       % Number of errors observed
  num = 0;          % Number of bits processed

  while((totErr < maxNumErrs) && (num < maxNum))
  % ===================================================================== %
  % Begin processing one block of information
  % ===================================================================== %
  % [SRC] generate N information bits 
  bits = randi([0,1], 1, N);    % Create bits

  % [ENC] convolutional encoder
  bits_encoded = encoder(bits,mod); % Encode for some given mod

  % [MOD] symbol mapper
  x = mapper(bits_encoded,1);       % Map to symbols

  % [CHA] add Gaussian noise
  y = add_awgn(x,EbN0(i));          % Add noise

  % [HR] Hard Receiver
  y_hard = hard_receiver(y,mod);
  y_final = y_hard(1:length(bits));

  % [SR] Soft Receiver - Viterbi
  % ...
  %decoded_bits = soft_receiver(bits_encoded);
  % ===================================================================== %
  % End processing one block of information
  % ===================================================================== %

  BitErrs = biterr(bits,y_hard); % count the bit errors and evaluate the bit error rate
  
  totErr = totErr + BitErrs;
  num = num + N; 
  
  disp(['+++ ' num2str(totErr) '/' num2str(maxNumErrs) ' errors. '...
      num2str(num) '/' num2str(maxNum) ' bits. Projected error rate = '...
      num2str(totErr/num, '%10.1e') '. +++']);


  end 
  BER(i) = totErr/num;

end

figure(1);
semilogy(0.5*EbN0,BER);ylim([1e-4,1]);
hold on;
grid on;
BER_theory = qfunc(sqrt(10.^(2*EbN0/10)));
semilogy(EbN0,BER_theory);
legend('Encoded trans. (Simulation)','Uncoded trans. (Theory BER)');
xlabel('Eb/N0 [dB]')
ylabel('BER')
hold off;
% ======================================================================= %
% End
% ======================================================================= %